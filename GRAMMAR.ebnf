
(*  whitespace: *)
(*  - '\n' is lexed as a NEWLINE token *)
(*  - '^\s+' is lexed as an INDENT(Space, N) token *)
(*  - '^\t+' is lexed as an INDENT(Tab, N) token *)
(*  - whenever the parser advances to the next token: *)
(*    if token == NEWLINE: *)
(*      indent = match(INDENT) *)
(*      if indent_style is None: indent_style = indent.style *)
(*      elif indent.style != indent_style: error("Mixing spaces and tabs") *)
(*      if indent_stack.top.level != 0 and indent is None: error("Expected indentation") *)
(*      indent = indent.unwrap() *)
(*      if indent.level == indent_stack.top.level: return *)
(*      if block.indent.level === 0 and indent.level != 0: error("Unexpected indentation") *)
(*      if indent.level > indent_stack.top.level: *)
(*        return indent_stack.push(indent) *)
(*      elif indent.level < indent_stack.top.level: *)
(*        found_matching_indent_level = false *)
(*        while prev_indent := indent_stack.top and prev_indent.level > block.indent.level: *)
(*          if indent.level < prev_indent.level: indent_stack.pop() *)
(*          elif indent.level == prev_indent.level: *)
(*            found_matching_indent_level = true *)
(*            break *)
(*        if not found_matching_indent_level: error("Inconsistent indentation") *)

(*  the grammar does not contain indentation rules, but they are: *)
(*  1. all statements in the same block must have the same indentation level *)
(*  2. a statement which creates a new scope (such as for/while/if) also increases the indentation level, *)
(*     which means that statements inside of this scope must have an indentation level higher than the *)
(*     scope-creating statement *)

(* TODO: named function args, generics (fn, struct), ADTs (enum), constants (?) *)

program ::= import_list stmt_list ;

import_list ::=
  | 'import' ident
  | 'import' path 'as' ident
  | 'import' import_item ( ',' import_item )* 'from' ident
  | 'import' import_item ( ',' import_item )* 'from' path
  ;
import_item ::= ident ( 'as' ident )? ;

stmt_list ::= stmt* ;

stmt ::=
  | block_stmt
  | if_stmt
  | var_stmt
  | for_stmt
  | while_stmt
  | loop_stmt
  | fn_stmt
  | throw_stmt
  | try_stmt
  | pass_stmt
  | continue_stmt
  | break_stmt
  | return_stmt
  | struct_stmt
  | trait_stmt
  | type_stmt
  | expr_stmt
  ;

block_stmt ::= stmt+ ;
if_stmt ::= 'if' expr ':' stmt ( 'elif' expr ':' stmt )* ( 'else' ':' stmt )? ;
var_stmt ::=
  | ident ':=' expr
  | ident ':' type_expr '=' expr
  ;
for_stmt ::= 'for' ident 'in' expr ':' stmt ;
while_stmt ::= 'while' expr ':' stmt ;
loop_stmt ::= 'loop' ':' stmt ;
fn_stmt ::= 'fn' ident param_list '->' type_expr ':' stmt ;
param_list ::= '(' ident ':' type_expr ( ',' ident ':' type_expr )* ')' ;
throw_stmt ::= 'throw' expr ;
(*  if 'catch' is not present, 'finally' is required *)
try_stmt ::=
  'try' ':' stmt
  ( 'catch' ident ':' stmt ) | ( ( 'catch' ident ':' stmt )? 'finally' ':' stmt )
  ;
pass_stmt ::= 'pass' ;
(*  TODO: labels? *)
continue_stmt ::= 'continue' ;
break_stmt ::= 'break' ;
(*  only allowed in a function *)
return_stmt ::= 'return' expr? ;
struct_stmt ::= 'struct' ident ':' ( struct_body | pass_stmt ) ;
struct_body ::= ( property | fn_stmt | impl )+ ;
property ::= ident ':' type_expr ('=' expr) ;
impl ::= 'impl' ident ( ':' fn_stmt+ )? ;
trait_stmt ::= 'trait' ident ( ':' fn_stmt+ )? ;
type_stmt ::= 'type' ident '=' type_expr ;

type_expr ::= primary_type_expr ( '+' primary_type_expr )*
primary_type_expr ::= ident ;

expr_stmt ::= comma_expr ;
comma_expr ::= expr ( ',' expr )* ;
expr ::=
  | anonymous_fn_expr
  | assignment_expr
  ;
(*  anonymous functions dont have param types *)
anonymous_fn_expr ::=
  | 'fn' ident ':' stmt
  | 'fn' '(' ident ( ',' ident )* ')' ':' stmt
  ;
assignment_expr ::=
  | assignment_target ( assignment_op expr )?
  | logic_or_expr
  ;
assignment_op ::= 
  | '='
  | '+='
  | '-='
  | '*='
  | '/='
  | '%='
  | '**='
  | '&&='
  | '||='
  | '<<='
  | '>>='
  | '&='
  | '|='
  | '^='
  | '~='
  ;
(*  can only assign in the following ways *)
(*  identifier = expression *)
(*  some().access = expression *)
(*  some()[index] = expression *)
assignment_target ::=
  | ident
  | call_expr '.' ident
  | call_expr '[' expr ']'
  ;
logic_or_expr ::= logic_and_expr ( ( '||' | 'or') logic_and_expr )* ;
logic_and_expr ::= eq_expr ( ( '&&' | 'and') eq_expr )* ;
eq_expr ::= comp_expr ( ( '==' | '!=' | 'is' ) comp_expr )* ;
comp_expr ::= add_expr ( ( '>' | '>=' | '<' | '<=' ) add_expr )* ;
add_expr ::= mult_expr ( ( '+' | '-' ) mult_expr )* ;
mult_expr ::= power_expr ( ( '/' | '*' | '%' ) power_expr )* ;
power_expr ::= unary_expr ( ( '**' ) power_expr )* ;
unary_expr ::=
  | ( '!' | 'not' | '~' ) unary_expr
  | call_expr
  ;
call_expr ::= primary_expr postfix_expr* ;
postfix_expr ::=
  | '(' expr ( ',' expr )* ')'
  | '.' ident
  | '[' expr ']'
  ;
primary_expr ::=
  | ident
  | none_literal
  | boolean_literal
  | integer_literal
  | float_literal
  | string_literal
  | list_literal
  | map_literal
  | group_expr
  ;
group_expr ::= '(' comma_expr ')' ;

none_literal ::= 'none' ;
boolean_literal ::= 'true' | 'false' ;
(*  integers may use underscores, e.g. 100_000 *)
integer_literal ::= REGEX{'[0-9]([0-9_]*[0-9])?'} ;
(*  IEEE 754 floating point literal *)
(*  examples: "1.0", "1e-5", "123.123E+5" *)
float_literal ::=
  | REGEX{'[0-9]+[Ee][+-]?[0-9]+|([0-9]+\\.[0-9]+([Ee][+-]?[0-9]+)?)'}
  | 'NaN'
  | 'inf'
  ;
(*  strings must be valid utf-8 *)
string_literal ::=
  | REGEX{'\"([^\"\\\\]|\\\\.)*\"'}
  | REGEX{'\'([^\'\\\\]|\\\\.)*\''}
  ;
list_literal ::= '[' ( expr ( ',' expr ) * )? ']' ;
map_literal ::= '{' key_value_pair* '}' ;
key_value_pair ::= expr ':' expr ;

ident ::= REGEX{'[a-zA-Z_][a-zA-Z0-9_]*'} ;